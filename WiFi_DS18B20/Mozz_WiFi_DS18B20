/*
 * DS18B29 & NeoPixel Strip & WiFi - tinkering ..
 * 
 * The MIT License (MIT)
 *
 * Copyright (c) 2015. Mario Mikočević <mozgy>
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
 */

#include <OneWire.h>
#include <DallasTemperature.h>

#include <ESP8266WiFi.h>
#include <WiFiClient.h>

#include <NeoPixelBus.h>


const char* ssid  = "MozzWiFi";
const char* pass  = "x";
const char* host  = "mozgy.t-com.hr";

// const float DSERROR = -300;

// (a 4.7K resistor is necessary)
#define ONE_WIRE_BUS 2

// Setup a oneWire instance to communicate with any OneWire devices 
// (not just Maxim/Dallas temperature ICs)
OneWire oneWire( ONE_WIRE_BUS );
 
// Pass our oneWire reference to Dallas Temperature.
DallasTemperature sensors( &oneWire );

#define pixelCount 8
#define pixelPin 5
NeoPixelBus strip = NeoPixelBus( pixelCount, pixelPin );

uint8_t c = 0;

char tmpstr[20];

void connect2wifi(void) {
  int WiFiCounter = 0;

  Serial.print( "Connecting to " );
  Serial.println( ssid );
  WiFi.mode( WIFI_STA );
  WiFi.begin( ssid, pass );
  
  while ( WiFi.status() != WL_CONNECTED && WiFiCounter < 30 ) {
    delay(1000);
    WiFiCounter++;
    Serial.print( "." );
  }
  Serial.println( "" );
  
  Serial.println( "WiFi connected" );
  Serial.print( "IP address: " );
  Serial.println( WiFi.localIP() );
}

/*
float getTemp(void) {
  byte i;
  byte present = 0;
  byte type_s;
  byte data[12];
  byte addr[8];
  float celsius;
  // float fahrenheit;

  
  if ( !oneWire.search(addr) ) {
    Serial.println( "No more addresses." );
    Serial.println();
    oneWire.reset_search();
    delay(250);
    return DSERROR;
  }
  
  Serial.print( "ROM =" );
  for( i = 0; i < 8; i++) {
    Serial.write(' ');
    Serial.print(addr[i], HEX);
  }

  if ( OneWire::crc8(addr, 7) != addr[7] ) {
      Serial.println( "CRC is not valid!" );
      return DSERROR;
  }
  Serial.println();
 
  // the first ROM byte indicates which chip
  switch (addr[0]) {
    case 0x10:
      Serial.println( "  Chip = DS18S20" );  // or old DS1820
      type_s = 1;
      break;
    case 0x28:
      Serial.println( "  Chip = DS18B20" );
      type_s = 0;
      break;
    case 0x22:
      Serial.println( "  Chip = DS1822" );
      type_s = 0;
      break;
    default:
      Serial.println( "Device is not a DS18x20 family device." );
      return DSERROR;
  } 

  oneWire.reset();
  oneWire.select( addr );
  oneWire.write( 0x44, 1 );        // start conversion, with parasite power on at the end
  
  delay(1000);     // maybe 750ms is enough, maybe not
  // we might do a ds.depower() here, but the reset will take care of it.
  
  present = oneWire.reset();
  oneWire.select( addr );    
  oneWire.write( 0xBE );         // Read Scratchpad

  Serial.print( "  Data = " );
  Serial.print( present, HEX );
  Serial.print( " " );
  for ( i = 0; i < 9; i++) {           // we need 9 bytes
    data[i] = oneWire.read();
    Serial.print( data[i], HEX );
    Serial.print( " " );
  }
  Serial.print( " CRC=" );
  Serial.print( OneWire::crc8(data, 8), HEX );
  Serial.println();

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  int16_t raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3; // 9 bit resolution default
    if (data[7] == 0x10) {
      // "count remain" gives full 12 bit resolution
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    // at lower res, the low bits are undefined, so let's zero them
    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
    //// default is 12 bit resolution, 750 ms conversion time
  }
  celsius = (float)raw / 16.0;
  // fahrenheit = celsius * 1.8 + 32.0;
  Serial.print( "  Temperature = " );
  Serial.print( celsius );
  Serial.println( " Celsius" );

  return celsius;
}
 */

void sendTemp( float temp ) {  
  WiFiClient client;

/*
  while( !client.connect( host, 80 )) {
    Serial.println( "connection failed" );
    connect2wifi(); 
  }
 */
 
  String url = "/ds18b20.php";
  url += "?LOC=1";
  url += "&TEMP=";
  url += temp;

  Serial.print("GET URL: ");
  Serial.println(url);
  
//  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
  Serial.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "Connection: close\r\n" +
//               "Authorization: Basic " + unameenc + " \r\n" +
//               "Content-Length: 0\r\n" +
               "Accept: */*\r\n" +
               "User-Agent: Mozilla/4.0 (compatible; esp8266 Arduino IDE; Windows NT 5.1)\r\n" +
               "\r\n");

  delay(100);
/*
  while( client.available() ){
    String line = client.readStringUntil('\r');
    Serial.print(line);
  }
 */
  
//  Serial.println();
//  Serial.println("Connection closed");
}

void setup(void) {

  Serial.begin( 115200 );
  delay(100);

  connect2wifi();

  // Start up the library
  sensors.begin();

  strip.Begin();
  strip.Show();

  Serial.println( "Setup done" );

}

void loop(void) {
  float temp;
  unsigned long sec;

/*
 * one way of doing this
  temp = getTemp();
  if ( temp == DSERROR ) {
    Serial.println( "Sensor ERROR !" );
  } else {
    sendTemp( temp );
  }
 */

  // call sensors.requestTemperatures() to issue a global temperature
  // request to all devices on the bus
  Serial.print(" Requesting temperature...");
  sensors.requestTemperatures(); // Send the command to get temperatures
  Serial.println("DONE");

  Serial.print("Temperature for Device 1 is: ");
  temp = sensors.getTempCByIndex( 0 );
  Serial.print( temp );
  // Why "byIndex"? 
  // You can have more than one IC on the same bus. 
  // 0 refers to the first IC on the wire
  Serial.println();

  Serial.println();
  Serial.print( "Time elapsed so far: " );   
  Serial.print( millis() / 1000 );
  Serial.println( "sec." );

  ElapsedStr(); // form str with hh:mm:ss
  Serial.println( tmpstr );
  Serial.println();

  RgbColor color;
  uint16_t r, g, b;

  r = ( temp > 27 )?128:0;
  g = ( temp >= 26 && temp <= 27 )?128:0;
  b = ( temp < 26 )?128:0;

  sprintf( tmpstr, "RGB - %d %d,%d,%d", c, r, g, b );
  Serial.println( tmpstr );
  color = RgbColor( r, g, b );
  strip.SetPixelColor( c, color );
  strip.Show();
  c++;
  if( c > 7 ) { c = 0; };
  Serial.println();

  delay(8000);
}

void ElapsedStr( void ) {

  unsigned long sec, minute, hour;

  sec = millis() / 1000;
  minute = ( sec % 3600 ) / 60;
  hour = sec / 3600;
  sprintf( tmpstr, "Elapsed " );
  if ( hour == 0 ) {
    sprintf( tmpstr, "%s   ", tmpstr );
  } else {
    sprintf( tmpstr, "%s%2d:", tmpstr, hour );
  }
  if ( minute >= 10 ) {
    sprintf( tmpstr, "%s%2d:", tmpstr, minute );
  } else {
    if ( hour != 0 ) {
      sprintf( tmpstr, "%s0%1d:", tmpstr, minute );
    } else {
      sprintf( tmpstr, "%s ", tmpstr );
      if ( minute == 0 ) {
        sprintf( tmpstr, "%s  ", tmpstr );
      } else {
        sprintf( tmpstr, "%s%1d:", tmpstr, minute );
      }
    }
  }
  if ( ( sec % 60 ) < 10 ) {
    sprintf( tmpstr, "%s0%1d", tmpstr, ( sec % 60 ) );
  } else {
    sprintf( tmpstr, "%s%2d", tmpstr, ( sec % 60 ) );
  }
  // sprintf( tmpstr, "Elapsed %2d:%2d:%2d", ( sec / 3600 ), ( ( sec % 3600 ) / 60 ), ( sec % 60 ) );

}
