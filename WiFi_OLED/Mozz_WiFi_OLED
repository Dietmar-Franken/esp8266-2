/*
 * OLEDWiFiScan - example of ESP8266 WiFi scan and OLED listing
 * 
 * The MIT License (MIT)
 *
 * Copyright (c) 2015. Mario Mikočević <mozgy>
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
 * Credits for parts of this code go to Daniel Eichhorn & Mike Rankin. 
 * Thank you so much for sharing!
 *
 * Ideas and code snippets - http://www.esp8266.com/viewtopic.php?f=29&t=3256
 * 
 */

// Serial printing ON/OFF
#include "Arduino.h"
#define DEBUG false
#define Serial if(DEBUG)Serial

#include <Wire.h>
#include <ESP8266WiFi.h>
#include <stdio.h>
#include <OLED_SSD1306.h>
#include "font.h"

/*
 * SSD1306 - 0.96" 128x64
 * SH1106  - 1.3"  132x64
 */

//// HW SPI pins
// #define SDA_pin 13
// #define SCL_pin 14
// I2C pins
// #define SDA_pin 4
// #define SCL_pin 5
//// ESP-01 pins
#define SDA_pin 0
#define SCL_pin 2

#define OLED_ADDRESS 0x3C
// #define OLED_ADDRESS 0x78
#define SCROLL_WORKS
// #undef SCROLL_WORKS

// 0.96" OLED
OLED_SSD1306 oled( OLED_ADDRESS );

// 1.3" OLED
// #define SH1106_LC_OFFSET 2
// OLED_SSD1306 oled( OLED_ADDRESS, SH1106_LC_OFFSET );

char tmpstr[20];

extern "C" {
#include "user_interface.h"
uint32_t readvdd33(void);
}

void setup() {

  Serial.begin(115200);

  // print out all system information
  Serial.println();
  Serial.print(F("Heap: ")); Serial.println(system_get_free_heap_size());
  Serial.print(F("Boot Vers: ")); Serial.println(system_get_boot_version());
  Serial.print(F("CPU: ")); Serial.println(system_get_cpu_freq());
  Serial.print(F("SDK: ")); Serial.println(system_get_sdk_version());
  Serial.println();

  Wire.begin( SDA_pin, SCL_pin );
  Wire.setClock( 400000 );

  Serial.println("OLED Init...");
  oled.Init();
  // oled.DisplayFlipON();

  Serial.println("Setup done");

}

void loop() {

  unsigned long sec;
  float Vdd;
  char tmpstr2[10];

  oled.ClearDisplay();
//  oled.SendStrXY( "Start-up ....  ", 0, 1 );
  sprintf( tmpstr, "ChipID %9d", ESP.getChipId() );
  oled.SendStrXY( tmpstr, 1, 0 );
  // sprintf( tmpstr, "FlashID %06X", ESP.getFlashChipId() );
  sprintf( tmpstr, "SDK %10s", ESP.getSdkVersion() );
  oled.SendStrXY( tmpstr, 2, 0 );
  sprintf( tmpstr, "Flash   %dkB", ESP.getFlashChipSize() / 1024 );
  oled.SendStrXY( tmpstr, 3, 0 );
//  sprintf( tmpstr, "Vcc %d", ESP.getVcc() );
//  Vdd = (float)ESP.getVcc() / 1000.0;
  sprintf( tmpstr, "Vcc %d", readvdd33() );
  Vdd = (float)readvdd33() / 1000.0;
  dtostrf( Vdd, 6, 3, tmpstr2 );
  sprintf( tmpstr, "Vcc %s", tmpstr2 );
  oled.SendStrXY( tmpstr, 5, 0 );
  ElapsedStr( tmpstr ); // form str with hh:mm:ss
  oled.SendStrXY( tmpstr, 6, 0 );
  delay(10000);

  Serial.println("Drawing waves");
  Draw_Waves();
  delay(1500);

  Serial.println("Drawing WiFi");
  Draw_WiFi();
  delay(2000);

  Serial.println("Starting Scan...");
  Scan_Wifi_Networks();

  Serial.print( "Time elapsed so far: " );   
  Serial.print( millis() / 1000 );
  Serial.println( "sec." );
  delay(30000);

}

void Scan_Wifi_Networks() {

  int c = 0;
  char myStr[17];

  // Set WiFi to station mode and disconnect from an AP if it was previously connected
  // Need to be in disconnected mode to Run network Scan!
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  delay(100);

  // WiFi.scanNetworks will return the number of networks found
  int n = WiFi.scanNetworks();
  Serial.println("Scaning Networks Complete..");
  Serial.print(n); Serial.println(" Networks have been Found");
  sprintf( myStr, "%d APs found\0", n );
  oled.ClearDisplay();
  oled.SendStrXY( myStr, 3, 0 ); // display the number of APs found
  delay(3000);
  
  if (n == 0) {

    oled.ClearDisplay();
    oled.SendStrXY( "No net found", 3, 0 );
    Serial.println("No networks found");

  } else {

    oled.ClearDisplay();

    Serial.print(n); Serial.println(" networks found");
    for( int i=0; i<n; i++ ) {
      // Print SSID and RSSI for each network found
      Serial.print( i + 1 );
      Serial.print( ": " );
      Serial.print( WiFi.SSID(i) );
      // lets try
      // Serial.print( " %2d ", wifi_get_channel() );
      // lets try
      Serial.print( " (" );
      Serial.print( WiFi.RSSI(i) ); // RSSI is negative number so '-' sign in front
      Serial.print( ")" );
      Serial.println( (WiFi.encryptionType(i) == ENC_TYPE_NONE)?" ":"*" );
      delay(10);
      sprintf( myStr, "%s", WiFi.SSID(i) );
      myStr[11] = 0;
      sprintf( myStr, "%s %2d%1s\0", myStr, WiFi.RSSI(i), (WiFi.encryptionType(i) == ENC_TYPE_NONE)?" ":"*" );
      oled.SendStrXY( myStr, c, 0 );
      Serial.println( myStr );
      c++;
      if(c > 7) {
        delay(10000);
        oled.ClearDisplay();
        c = 0 ;
      }
      delay(500);

    }
  }

  Serial.println("");
}

void ElapsedStr( char *str ) {

  unsigned long sec, minute, hour;

  sec = millis() / 1000;
  minute = ( sec % 3600 ) / 60;
  hour = sec / 3600;
  sprintf( str, "Elapsed " );
  if ( hour == 0 ) {
    sprintf( str, "%s   ", str );
  } else {
    sprintf( str, "%s%2d:", str, hour );
  }
  if ( minute >= 10 ) {
    sprintf( str, "%s%2d:", str, minute );
  } else {
    if ( hour != 0 ) {
      sprintf( str, "%s0%1d:", str, minute );
    } else {
      sprintf( str, "%s ", str );
      if ( minute == 0 ) {
        sprintf( str, "%s  ", str );
      } else {
        sprintf( str, "%s%1d:", str, minute );
      }
    }
  }
  if ( ( sec % 60 ) < 10 ) {
    sprintf( str, "%s0%1d", str, ( sec % 60 ) );
  } else {
    sprintf( str, "%s%2d", str, ( sec % 60 ) );
  }

}

#ifdef SCROLL_WORKS

void Draw_Waves(void) {
  unsigned char i;

  // oled.DisplayOFF();
  // oled.ClearDisplay();
  oled.SetCursorXY( 0, 0 );
  for( int i=0; i < 128*8; i++ ) {
    oled.SendChar( pgm_read_byte( rfwaves + i ) );
  }
  oled.DisplayON();
}

void Draw_WiFi(void) {
  unsigned char i;

  // oled.DisplayOFF();
  // oled.ClearDisplay();
  oled.SetCursorXY( 0, 0 );
  for( int i=0; i < 128*8; i++ ) {
    oled.SendChar( pgm_read_byte( WIFI1 + i ) );
  }
  oled.DisplayON();
}

#else

void Draw_Waves(void) {
  unsigned char i,j;

  oled.DisplayOFF();
  // oled.ClearDisplay();
  for( int i=0; i<8; i++ ) {
    oled.SetCursorXY( i, 0 );
    for( int j=0; j<16*8; j++ ) {
      oled.SendChar( pgm_read_byte( rfwaves + j + i*16*8 ) );
    }
  }
  oled.DisplayON();

}

void Draw_WiFi(void) {
  unsigned char i,j;

  oled.DisplayOFF();
  // oled.ClearDisplay();
  for( int i=0; i<8; i++ ) {
    oled.SetCursorXY( i, 0 );
    for( int j=0; j<16*8; j++ ) {
      oled.SendChar( pgm_read_byte( WIFI1 + j + i*16*8 ) );
    }
  }
  oled.DisplayON();
}

#endif
