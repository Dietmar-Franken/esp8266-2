/*
 * Mozz - ver 0.7
 * DS18B20
 * WiFi fun
 */

#include <ESP8266WiFi.h>
#include <OneWire.h>
#include <WiFiClient.h>

long startMillis;

const char* ssid  = "MozzWiFi";
const char* pass  = "x";
const char* host  = "mozgy.t-com.hr";

const float DSERROR = -300;

OneWire ds(2);  // on pin 2 (a 4.7K resistor is necessary)

void connect2wifi(void) {
  int WiFiCounter = 0;

  Serial.print( "Connecting to " );
  Serial.println( ssid );
  WiFi.mode( WIFI_STA );
  WiFi.begin( ssid, pass );
  
  while ( WiFi.status() != WL_CONNECTED && WiFiCounter < 30 ) {
    delay(1000);
    WiFiCounter++;
    Serial.print( "." );
  }
  Serial.println( "" );
  
  Serial.println( "WiFi connected" );
  Serial.print( "IP address: " );
  Serial.println( WiFi.localIP() );
}

float getTemp(void) {
  byte i;
  byte present = 0;
  byte type_s;
  byte data[12];
  byte addr[8];
  float celsius;
  // float fahrenheit;

  
  if ( !ds.search(addr) ) {
    Serial.println( "No more addresses." );
    Serial.println();
    ds.reset_search();
    delay(250);
    return DSERROR;
  }
  
  Serial.print( "ROM =" );
  for( i = 0; i < 8; i++) {
    Serial.write(' ');
    Serial.print(addr[i], HEX);
  }

  if (OneWire::crc8(addr, 7) != addr[7]) {
      Serial.println( "CRC is not valid!" );
      return DSERROR;
  }
  Serial.println();
 
  // the first ROM byte indicates which chip
  switch (addr[0]) {
    case 0x10:
      Serial.println( "  Chip = DS18S20" );  // or old DS1820
      type_s = 1;
      break;
    case 0x28:
      Serial.println( "  Chip = DS18B20" );
      type_s = 0;
      break;
    case 0x22:
      Serial.println( "  Chip = DS1822" );
      type_s = 0;
      break;
    default:
      Serial.println( "Device is not a DS18x20 family device." );
      return DSERROR;
  } 

  ds.reset();
  ds.select(addr);
  ds.write(0x44, 1);        // start conversion, with parasite power on at the end
  
  delay(1000);     // maybe 750ms is enough, maybe not
  // we might do a ds.depower() here, but the reset will take care of it.
  
  present = ds.reset();
  ds.select(addr);    
  ds.write(0xBE);         // Read Scratchpad

  Serial.print( "  Data = " );
  Serial.print( present, HEX );
  Serial.print( " " );
  for ( i = 0; i < 9; i++) {           // we need 9 bytes
    data[i] = ds.read();
    Serial.print( data[i], HEX );
    Serial.print( " " );
  }
  Serial.print( " CRC=" );
  Serial.print( OneWire::crc8(data, 8), HEX );
  Serial.println();

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  int16_t raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3; // 9 bit resolution default
    if (data[7] == 0x10) {
      // "count remain" gives full 12 bit resolution
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    // at lower res, the low bits are undefined, so let's zero them
    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
    //// default is 12 bit resolution, 750 ms conversion time
  }
  celsius = (float)raw / 16.0;
  // fahrenheit = celsius * 1.8 + 32.0;
  Serial.print( "  Temperature = " );
  Serial.print( celsius );
  Serial.println( " Celsius" );

  return celsius;
}

void sendTemp(float temp) {  
  WiFiClient client;

/*
  while( !client.connect( host, 80 )) {
    Serial.println( "connection failed" );
    connect2wifi(); 
  }
 */
 
  String url = "/ds18b20.php";
  url += "?TEMP=";
  url += temp;

  Serial.print("GET URL: ");
  Serial.println(url);
  
//  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
  Serial.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "Connection: close\r\n" +
//               "Authorization: Basic " + unameenc + " \r\n" +
//               "Content-Length: 0\r\n" +
               "Accept: */*\r\n" +
               "User-Agent: Mozilla/4.0 (compatible; esp8266 Arduino IDE; Windows NT 5.1)\r\n" +
               "\r\n");

  delay(100);
/*
  while( client.available() ){
    String line = client.readStringUntil('\r');
    Serial.print(line);
  }
 */
  
  Serial.println();
//  Serial.println("Connection closed");
}

void setup(void) {
  startMillis = millis();
  Serial.begin( 115200 );
  delay(100);
  Serial.println( "Setup done" );

  connect2wifi();
}

void loop(void) {
  float temp;

  temp = getTemp();
  if ( temp == DSERROR ) {
    Serial.println( "Sensor ERROR !" );
  } else {
    sendTemp( temp );
  }

  Serial.print( "Time elapsed so far: " );   
  Serial.print( ( millis() - startMillis ) /100 );
  Serial.println( "sec." );

  delay(15000);
}

